on:
  workflow_call:
    inputs:
      type:
        description: "the expected lint entrypoint: make, just, or github"
        default: "github"
        required: false
        type: string
      language:
        description: "the language to configure"
        required: true
        type: string
      directory:
        description: "the directory to run the lint in"
        required: false
        type: string
        default: ${{ github.workspace }}
      continue-on-error:
        description: "don't mark the job as failed if a lint fails"
        default: false
        required: false
        type: boolean
      python-version:
        description: "the version of Python to configure, if any (can be SemVer-formatted)"
        default: ""
        required: false
        type: string
      python-version-file:
        description: "get the Python version from the specified file"
        default: ".python-version"
        required: false
        type: string
      go-version:
        description: "the Go version"
        default: ""
        required: false
        type: string
      go-version-file:
        description: "the file to get the Go version from"
        default: "go.mod"
        required: false
        type: string
      golangci-lint-version:
        description: "the golangci-lint version for Go linting"
        default: "v1.50.1"
        required: false
        type: string
      cargo-sort:
        description: "run cargo-sort as part of Rust linting"
        default: false
        required: false
        type: boolean

env:
  # Rust: GitHub Actions supports color codes, so always enable them.
  CARGO_TERM_COLOR: always

  # Python: Tell ruff that we're in GitHub Actions, so that it emits annotations.
  RUFF_FORMAT: github

defaults:
  run:
    working-directory: "${{ inputs.directory }}"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: validate input
        run: |
          if [ "${{ inputs.language }}" == "python" ] && [ "${{ inputs.type }}" == "github" ]; then
            echo "you must use either make or just to run a lint target for python"
            exit 1
          fi

      # Python
      - name: configure python, if required
        if: inputs.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.python-version }}"
          python-version-file: "${{ inputs.python-version-file }}"
          cache: pip
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Rust
      - name: configure rust and clippy, if required
        if: inputs.language == 'rust' 
        continue-on-error: ${{ inputs.continue-on-error }}
        run: |
          # we always run the latest stable Rust and Clippy for Rust linting.
          rustup update
          rustup component add clippy

      - name: run rustfmt (rust)
        if: inputs.language == 'rust' && inputs.type == 'github'
        continue-on-error: ${{ inputs.continue-on-error }}
        run: cargo fmt --check

      - name: run clippy (rust)
        # NOTE: This is a fork of the original `actions-rs/clippy-check`,
        # which is no longer maintained; the commit is pinned since no release
        # has been made and its long term maintenance status/ownership is unclear.
        if: inputs.language == 'rust' && inputs.type == 'github'
        continue-on-error: ${{ inputs.continue-on-error }}
        uses: actions-rs-plus/clippy-check@5eb300cdebee2681ff8513b9348b0ca793d8a293
        with:
          args: --all-features -- -D warnings

      - name: run cargo sort (rust)
        if: inputs.language == 'rust' && inputs.type == 'github'
        continue-on-error: ${{ inputs.continue-on-error }}
        run: |
          cargo install cargo-sort
          cargo sort -c

      # Go
      - name: configure go, if required
        if: inputs.language == 'go'
        continue-on-error: ${{ inputs.continue-on-error }}
        uses: actions/setup-go@v3
        with:
          go-version-file: "${{ inputs.go-version-file }}"
          go-version: "${{ inputs.go-version }}"

      - name: run golangci-lint (go)
        if: inputs.language == 'go' && inputs.type == 'github'
        continue-on-error: ${{ inputs.continue-on-error }}
        uses: golangci/golangci-lint-action@0ad9a0988b3973e851ab0a07adf248ec2e100376 # @v3.3.1
        with:
          version: "${{ inputs.golangci-lint-version }}"

      # Make
      - name: run lint (make)
        if: inputs.type == 'make'
        continue-on-error: ${{ inputs.continue-on-error }}
        run: make lint

      # Just
      - name: configure just, if required
        if: inputs.type == 'just'
        run: cargo install just
      - name: run lint (just)
        if: inputs.type == 'just'
        continue-on-error: ${{ inputs.continue-on-error }}
        run: just lint
